{"ast":null,"code":"import _defineProperty from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport * as actions from \"./actions\";\nimport initialState from \"./state\";\nimport { createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nvar thingsPageReducer = createReducer(initialState.things_page, function (builder) {\n  builder.addCase(actions.thingsLoad, function (state, action) {\n    state.loading = true;\n    state.loaded = false;\n    state.error = null;\n  }).addCase(actions.thingsLoadComplete, function (state, action) {\n    state.loading = false;\n    state.loaded = true;\n    if (action.payload.error) state.error = action.payload.error;else state.things = action.payload.things;\n  }).addCase(actions.thingsLoadError, function (state, action) {\n    state.loading = false;\n    state.loaded = true;\n    state.error = action.payload;\n  }).addCase(actions.thingAdd, function (state, action) {\n    state.adding = true;\n  }).addCase(actions.thingAddComplete, function (state, action) {\n    state.adding = false;\n    state.things.unshift(action.payload.thing);\n  }).addCase(actions.thingAddError, function (state, action) {\n    state.adding = false;\n    state.error = action.payload;\n  });\n}); //Board reducer\n\nvar board = function board() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    lists: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.addList:\n      {\n        var listId = action.payload.listId;\n        return {\n          lists: [].concat(_toConsumableArray(state.lists), [listId])\n        };\n      }\n\n    case actions.moveList:\n      {\n        var _action$payload = action.payload,\n            oldListIndex = _action$payload.oldListIndex,\n            newListIndex = _action$payload.newListIndex;\n        var newLists = Array.from(state.lists);\n\n        var _newLists$splice = newLists.splice(oldListIndex, 1),\n            _newLists$splice2 = _slicedToArray(_newLists$splice, 1),\n            removedList = _newLists$splice2[0];\n\n        newLists.splice(newListIndex, 0, removedList);\n        return {\n          lists: newLists\n        };\n      }\n\n    case actions.deleteList:\n      {\n        var _listId = action.payload.listId;\n\n        var filterDeleted = function filterDeleted(tmpListId) {\n          return tmpListId !== _listId;\n        };\n\n        var _newLists = state.lists.filter(filterDeleted);\n\n        return {\n          lists: _newLists\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //ListById reducer\n\n\nvar listsById = function listsById() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.addList:\n      {\n        var _action$payload2 = action.payload,\n            listId = _action$payload2.listId,\n            listTitle = _action$payload2.listTitle;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, listId, {\n          _id: listId,\n          title: listTitle,\n          cards: []\n        }));\n      }\n\n    case actions.changeListTitle:\n      {\n        var _action$payload3 = action.payload,\n            _listId2 = _action$payload3.listId,\n            _listTitle = _action$payload3.listTitle;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, _listId2, _objectSpread(_objectSpread({}, state[_listId2]), {}, {\n          title: _listTitle\n        })));\n      }\n\n    case actions.deleteList:\n      {\n        var _listId3 = action.payload.listId; //const { [listId]: deletedList, ...restOfLists } = state;\n\n        var newState = _objectSpread({}, state);\n\n        delete newState[_listId3];\n        return newState;\n      }\n\n    case actions.addCard:\n      {\n        var _action$payload4 = action.payload,\n            _listId4 = _action$payload4.listId,\n            cardId = _action$payload4.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, _listId4, _objectSpread(_objectSpread({}, state[_listId4]), {}, {\n          cards: [].concat(_toConsumableArray(state[_listId4].cards), [cardId])\n        })));\n      }\n\n    case actions.moveCard:\n      {\n        var _objectSpread6;\n\n        var _action$payload5 = action.payload,\n            oldCardIndex = _action$payload5.oldCardIndex,\n            newCardIndex = _action$payload5.newCardIndex,\n            sourceListId = _action$payload5.sourceListId,\n            destListId = _action$payload5.destListId; // Move within the same list\n\n        if (sourceListId === destListId) {\n          var newCards = Array.from(state[sourceListId].cards);\n\n          var _newCards$splice = newCards.splice(oldCardIndex, 1),\n              _newCards$splice2 = _slicedToArray(_newCards$splice, 1),\n              _removedCard = _newCards$splice2[0];\n\n          newCards.splice(newCardIndex, 0, _removedCard);\n          return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, sourceListId, _objectSpread(_objectSpread({}, state[sourceListId]), {}, {\n            cards: newCards\n          })));\n        } // Move card from one list to another\n\n\n        var sourceCards = Array.from(state[sourceListId].cards);\n\n        var _sourceCards$splice = sourceCards.splice(oldCardIndex, 1),\n            _sourceCards$splice2 = _slicedToArray(_sourceCards$splice, 1),\n            removedCard = _sourceCards$splice2[0];\n\n        var destinationCards = Array.from(state[destListId].cards);\n        destinationCards.splice(newCardIndex, 0, removedCard);\n        return _objectSpread(_objectSpread({}, state), {}, (_objectSpread6 = {}, _defineProperty(_objectSpread6, sourceListId, _objectSpread(_objectSpread({}, state[sourceListId]), {}, {\n          cards: sourceCards\n        })), _defineProperty(_objectSpread6, destListId, _objectSpread(_objectSpread({}, state[destListId]), {}, {\n          cards: destinationCards\n        })), _objectSpread6));\n      }\n\n    case actions.deleteCard:\n      {\n        var _action$payload6 = action.payload,\n            deletedCardId = _action$payload6.cardId,\n            _listId5 = _action$payload6.listId;\n\n        var filterDeleted = function filterDeleted(cardId) {\n          return cardId !== deletedCardId;\n        };\n\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, _listId5, _objectSpread(_objectSpread({}, state[_listId5]), {}, {\n          cards: state[_listId5].cards.filter(filterDeleted)\n        })));\n      }\n\n    default:\n      return state;\n  }\n}; //Cards By ID reducer\n\n\nvar cardsById = function cardsById() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.addCard:\n      {\n        var _action$payload7 = action.payload,\n            cardText = _action$payload7.cardText,\n            cardId = _action$payload7.cardId,\n            commentCount = _action$payload7.commentCount,\n            completedTaskCount = _action$payload7.completedTaskCount,\n            taskCount = _action$payload7.taskCount,\n            likeCount = _action$payload7.likeCount,\n            status = _action$payload7.status;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, cardId, {\n          text: cardText,\n          _id: cardId,\n          commentCount: commentCount ? commentCount : null,\n          taskCount: taskCount ? taskCount : null,\n          completedTaskCount: completedTaskCount ? completedTaskCount : null,\n          likeCount: likeCount ? likeCount : null,\n          status: status ? status : null\n        }));\n      }\n\n    case actions.changeCardText:\n      {\n        var _action$payload8 = action.payload,\n            _cardText = _action$payload8.cardText,\n            _cardId = _action$payload8.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, _cardId, _objectSpread(_objectSpread({}, state[_cardId]), {}, {\n          text: _cardText\n        })));\n      }\n\n    case actions.deleteCard:\n      {\n        var _cardId2 = action.payload.cardId; //const { [cardId]: deletedCard, ...restOfCards } = state;\n\n        var newState = _objectSpread({}, state);\n\n        delete newState[_cardId2];\n        return newState;\n      }\n    // Find every card from the deleted list and remove it\n\n    case actions.deleteList:\n      {\n        var cardIds = action.payload.cards;\n        return Object.keys(state).filter(function (cardId) {\n          return !cardIds.includes(cardId);\n        }).reduce(function (newState, cardId) {\n          return _objectSpread(_objectSpread({}, newState), {}, _defineProperty({}, cardId, state[cardId]));\n        }, {});\n      }\n\n    default:\n      return state;\n  }\n}; // Combined state\n// -----------------------------------------------------------------------------\n\n\nvar combinedReducer = combineReducers({\n  things_page: thingsPageReducer,\n  board: board,\n  listsById: listsById,\n  cardsById: cardsById\n});\n\nfunction rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return combinedReducer(state, action);\n  }\n}\n\nvar saveState = function saveState(state) {\n  try {\n    var serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (_unused) {// ignore write errors\n  }\n};\n\nvar loadState = function loadState() {\n  try {\n    var serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nvar persistedState = loadState();\nvar store = createStore(combinedReducer, persistedState);\nstore.subscribe(throttle(function () {\n  saveState(store.getState());\n}, 1000));\nconsole.log(store.getState(), JSON.stringify(store.getState()));\n\nif (!store.getState().board.lists.length || store.getState().board.lists.length === 0) {\n  console.log(\"SEED\"); //seed(store);\n}\n\nexport default rootReducer;","map":null,"metadata":{},"sourceType":"module"}