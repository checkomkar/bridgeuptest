{"ast":null,"code":"import _extends from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport * as actions from \"../store/actions\";\nimport Card from \"./Card\";\nimport CardEditor from \"./CardEditor\";\nimport ListEditor from \"./ListEditor\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\nexport default function List(props) {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      board = _useSelector.board,\n      cardsById = _useSelector.cardsById,\n      listsById = _useSelector.listsById;\n\n  var listId = props.listId,\n      index = props.index;\n  var list = listsById[listId];\n\n  var _useState = useState(false),\n      editingTitle = _useState[0],\n      setEditingTitle = _useState[1];\n\n  var _useState2 = useState(list.title),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(false),\n      addingCard = _useState3[0],\n      setAddingCard = _useState3[1];\n\n  var toggleAddingCard = function toggleAddingCard() {\n    setAddingCard(!addingCard);\n  };\n\n  var toggleEditingTitle = function toggleEditingTitle() {\n    setEditingTitle(!editingTitle);\n  };\n\n  var handleChangeTitle = function handleChangeTitle(e) {\n    return setTitle(e.target.value);\n  };\n\n  var editListTitle = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              toggleEditingTitle();\n              dispatch({\n                type: actions.changeListTitle,\n                payload: {\n                  listId: listId,\n                  listTitle: title\n                }\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function editListTitle() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var deleteList = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (window.confirm(\"Are you sure to delete this list?\")) {\n                dispatch({\n                  type: actions.deleteList,\n                  payload: {\n                    listId: listId,\n                    cards: list.cards\n                  }\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function deleteList() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var addCard = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(cardText) {\n      var cardId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              toggleAddingCard();\n              cardId = shortid.generate();\n              dispatch({\n                type: actions.addCard,\n                payload: {\n                  cardText: cardText,\n                  cardId: cardId,\n                  listId: listId\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function addCard(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Draggable, {\n    draggableId: list._id,\n    index: index\n  }, function (provided, snapshot) {\n    return __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      className: \"List\"\n    }), editingTitle ? __jsx(ListEditor, {\n      list: list,\n      title: title,\n      handleChangeTitle: handleChangeTitle,\n      saveList: editListTitle,\n      onClickOutside: editListTitle,\n      deleteList: deleteList\n    }) : __jsx(\"div\", {\n      className: \"List-Title\",\n      onClick: toggleEditingTitle\n    }, list.title), __jsx(Droppable, {\n      droppableId: list._id\n    }, function (provided, _snapshot) {\n      return __jsx(\"div\", {\n        ref: provided.innerRef,\n        className: \"Lists-Cards\"\n      }, list.cards && list.cards.map(function (cardId, index) {\n        return __jsx(Card, {\n          key: cardId,\n          cardId: cardId,\n          index: index,\n          listId: list._id\n        });\n      }), provided.placeholder, addingCard ? __jsx(CardEditor, {\n        onSave: addCard,\n        onCancel: toggleAddingCard,\n        adding: true\n      }) : __jsx(\"div\", {\n        className: \"Toggle-Add-Card\",\n        onClick: toggleAddingCard\n      }, \"+ Add a card\"));\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}