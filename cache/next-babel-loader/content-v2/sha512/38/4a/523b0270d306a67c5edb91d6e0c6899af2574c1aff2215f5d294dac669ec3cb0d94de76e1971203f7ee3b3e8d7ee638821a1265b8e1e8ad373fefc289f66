{"ast":null,"code":"import _regeneratorRuntime from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logActions),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(thingsSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(thingAddSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as actions from './actions';\nimport * as api from '../lib/api';\nimport log from '../lib/log';\n\nfunction logActions(action) {\n  return _regeneratorRuntime.wrap(function logActions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          log.info('action', action);\n          _context.next = 3;\n          return;\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction thingsSaga() {\n  var response;\n  return _regeneratorRuntime.wrap(function thingsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(api.things.getThings);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put(actions.thingsLoadComplete(response));\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(actions.thingsLoadError(_context2.t0));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction thingAddSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function thingAddSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(api.things.addThing, action.payload);\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return put(actions.thingAddComplete(response));\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put(actions.thingAddError(_context3.t0));\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery('*', logActions), takeLatest(actions.thingsLoad.type, thingsSaga), takeLatest(actions.thingAdd.type, thingAddSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default rootSaga;","map":null,"metadata":{},"sourceType":"module"}