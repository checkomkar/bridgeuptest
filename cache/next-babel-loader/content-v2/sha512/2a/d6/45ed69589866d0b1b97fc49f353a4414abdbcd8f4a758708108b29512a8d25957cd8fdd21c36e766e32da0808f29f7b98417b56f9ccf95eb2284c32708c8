{"ast":null,"code":"import _extends from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/projects/nextjs-boilerplate-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport * as actions from \"../store/actions\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CardEditor from \"./CardEditor\";\nimport { TiEdit } from \"react-icons/ti\";\nimport { FaRegComment } from \"react-icons/fa\";\nimport { IoMdCheckboxOutline } from \"react-icons/io\";\nimport { BiLike } from \"react-icons/bi\";\nimport styles from \"./styles/Card.module.scss\";\n\nfunction Card(props) {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      cardsById = _useSelector.cardsById;\n\n  var cardId = props.cardId,\n      index = props.index,\n      listId = props.listId;\n  var card = cardsById[props.cardId];\n\n  var _useState = useState(false),\n      hover = _useState[0],\n      setHover = _useState[1];\n\n  var _useState2 = useState(false),\n      editing = _useState2[0],\n      setEditing = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      text = _useState3[0],\n      setText = _useState3[1];\n\n  var startEditing = function startEditing() {\n    setEditing(true);\n    setText(props.text);\n    setHover(false);\n  };\n\n  var endEditing = function endEditing() {\n    setEditing(false);\n    setHover(false);\n  };\n\n  var startHover = function startHover() {\n    return setHover(true);\n  };\n\n  var endHover = function endHover() {\n    return setHover(false);\n  };\n\n  var editCard = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              endEditing();\n              dispatch({\n                type: actions.changeCardText,\n                payload: {\n                  cardId: card._id,\n                  cardText: text\n                }\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function editCard(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var deleteCard = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (window.confirm(\"Are you sure to delete this card?\")) {\n                dispatch({\n                  type: actions.deleteCard,\n                  payload: {\n                    cardId: card._id,\n                    listId: listId\n                  }\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function deleteCard() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (!editing) {\n    return __jsx(Draggable, {\n      draggableId: card._id,\n      index: index\n    }, function (provided, snapshot) {\n      return __jsx(\"div\", _extends({\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps, {\n        className: \"Card\",\n        onMouseEnter: startHover,\n        onMouseLeave: endHover\n      }), hover && __jsx(\"div\", {\n        className: \"Card-Icons\"\n      }, __jsx(\"div\", {\n        className: \"Card-Icon\",\n        onClick: startEditing\n      }, __jsx(TiEdit, null))), __jsx(\"div\", {\n        className: \"Card-Status \".concat(card.status && card.status == \"red\" ? \"red\" : \"\")\n      }), card.text, __jsx(\"div\", {\n        className: styles[\"card-activities\"]\n      }, card.commentCount && __jsx(\"div\", {\n        className: styles[\"activity\"]\n      }, __jsx(\"div\", {\n        className: styles[\"activity-icon\"]\n      }, __jsx(FaRegComment, null)), __jsx(\"div\", {\n        className: styles[\"activity-content\"]\n      }, card.commentCount)), card.taskCount && __jsx(\"div\", {\n        className: styles[\"activity\"]\n      }, __jsx(\"div\", {\n        className: styles[\"activity-icon\"]\n      }, __jsx(IoMdCheckboxOutline, null)), __jsx(\"div\", {\n        className: styles[\"activity-content\"]\n      }, \"\".concat(card.completedTaskCount, \"/\").concat(card.taskCount))), card.likeCount && __jsx(\"div\", {\n        className: styles[\"activity\"]\n      }, __jsx(\"div\", {\n        className: styles[\"activity-icon\"]\n      }, __jsx(BiLike, null)), __jsx(\"div\", {\n        className: styles[\"activity-content\"]\n      }, card.likeCount))));\n    });\n  } else {\n    return __jsx(React.Fragment, null, __jsx(CardEditor, {\n      text: card.text,\n      onSave: editCard,\n      onDelete: deleteCard,\n      onCancel: endEditing\n    }));\n  }\n}\n\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}