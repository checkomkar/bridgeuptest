{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Icons from \"heroicons-react\";\nimport clsx from \"clsx\";\nimport { thingsLoad, END } from \"../store/actions\";\nimport * as actions from \"../store/actions\";\nimport { reduxWrapper } from \"../store/wrapper\";\nimport Loader from \"../components/loader\";\nimport log from \"../lib/log\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Board from \"../components/Board\";\nimport shortid from \"shortid\";\nimport NavBar from \"../components/NavBar\";\nimport SignUpForFree from \"../components/SignUpForFree\";\nimport KanBanMenu from \"../components/KanBanMenu\";\nconst DEBUG = true;\nexport const getServerSideProps = reduxWrapper.getServerSideProps(async ({\n  store,\n  query\n}) => {\n  if (query.preload) {\n    log.info(\"preloading?\");\n    store.dispatch(thingsLoad());\n    store.dispatch(END);\n    await store.sagaTask.toPromise();\n  }\n});\nexport default function ThingsPage() {\n  const {\n    loading,\n    loaded,\n    adding,\n    things,\n    error\n  } = useSelector(state => state.things_page);\n  const myState = useSelector(state => state);\n\n  const getItems = count => Array.from({\n    length: count\n  }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n  const dispatch = useDispatch();\n  const {\n    0: items,\n    1: setItems\n  } = useState(getItems(6));\n\n  const reload = () => dispatch(thingsLoad());\n\n  const seed = () => {\n    const firstListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: firstListId,\n        listTitle: \"To Do\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: firstListId,\n        cardId: shortid.generate(),\n        cardText: \"Helpdesk Call AA999\",\n        commentCount: 1,\n        completedTaskCount: 1,\n        taskCount: 3\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: firstListId,\n        cardId: shortid.generate(),\n        cardText: \"Helpdesk Call BB999\"\n      }\n    });\n    console.log(\"Insert second list\");\n    const secondListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: secondListId,\n        listTitle: \"Development\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: secondListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call CC999\",\n        likeCount: 1,\n        status: \"red\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: secondListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call DD999\"\n      }\n    });\n    const thirdListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: thirdListId,\n        listTitle: \"Testing\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: thirdListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call EE999\",\n        status: \"red\"\n      }\n    });\n    const fourthListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: fourthListId,\n        listTitle: \"Done\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: fourthListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call FF999\",\n        status: \"blue\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: fourthListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call GG999\",\n        status: \"red\"\n      }\n    });\n  };\n\n  useEffect(() => {\n    var _myState$board, _myState$board$lists;\n\n    if (!loaded) reload();\n    if ((myState === null || myState === void 0 ? void 0 : (_myState$board = myState.board) === null || _myState$board === void 0 ? void 0 : (_myState$board$lists = _myState$board.lists) === null || _myState$board$lists === void 0 ? void 0 : _myState$board$lists.length) > 0) return;\n    seed();\n  }, []);\n  /* useEffect(() => {\n  \tconsole.log(\"myState\", myState);\n  }, [myState]); */\n\n  return __jsx(React.Fragment, null, __jsx(NavBar, null), __jsx(SignUpForFree, null), __jsx(Container, {\n    fluid: true\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: 12\n  }, __jsx(KanBanMenu, null)), __jsx(Col, {\n    xs: 12\n  }, __jsx(Board, null)))));\n}\n\nconst Button = ({\n  onClick,\n  children,\n  color = \"blue\",\n  className = null\n}) => {\n  const button_class = clsx(\"flex flex-row items-center font-bold px-2 py-1 rounded gap-2 cursor-pointer\", `bg-${color}-600 hover:bg-${color}-700 text-${color}-100`, className);\n  return __jsx(\"a\", {\n    className: button_class,\n    onClick: onClick\n  }, children);\n};\n\nconst Loading = () => __jsx(\"div\", {\n  className: \"p-8 bg-blue-100\"\n}, __jsx(Loader, {\n  color: \"bg-blue-200\"\n}));\n\nconst Error = ({\n  error\n}) => __jsx(\"div\", null, __jsx(\"p\", {\n  className: \"p-8 bg-red-100 text-red-800 font-bold\"\n}, __jsx(Icons.Exclamation, {\n  size: 16,\n  className: \"inline-block mr-2\"\n}), error.message), DEBUG && error.stack && __jsx(\"pre\", {\n  className: \"w-full overflow-x-scroll text-xs bg-red-200 text-red-800 p-8\"\n}, error.stack));\n\nconst ThingsList = ({\n  things\n}) => __jsx(\"div\", {\n  className: \"divide-y\"\n}, things.map(thing => __jsx(ThingItem, {\n  thing: thing,\n  key: thing.word\n})));\n\nconst ThingItem = ({\n  thing\n}) => __jsx(\"div\", {\n  className: \"p-6\"\n}, __jsx(\"div\", {\n  className: \"flex flex-row gap-2 items-center\"\n}, __jsx(\"h2\", {\n  className: \"text-xl font-bold\"\n}, thing.word), __jsx(\"p\", {\n  className: \"italic text-gray-400\"\n}, thing.pronounciation)), __jsx(\"p\", {\n  className: \"mt-2\"\n}, thing.definition));","map":null,"metadata":{},"sourceType":"module"}