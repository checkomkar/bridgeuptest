{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as Icons from \"heroicons-react\";\nimport clsx from \"clsx\";\nimport { thingsLoad } from \"../store/actions\";\nimport * as actions from \"../store/actions\";\nimport Loader from \"../components/loader\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Board from \"../components/Board\";\nimport shortid from \"shortid\";\nimport NavBar from \"../components/NavBar\";\nimport SignUpForFree from \"../components/SignUpForFree\";\nimport KanBanMenu from \"../components/KanBanMenu\";\nvar DEBUG = true;\nexport var __N_SSP = true;\nexport default function ThingsPage() {\n  var _useSelector = useSelector(function (state) {\n    return state.things_page;\n  }),\n      loading = _useSelector.loading,\n      loaded = _useSelector.loaded,\n      adding = _useSelector.adding,\n      things = _useSelector.things,\n      error = _useSelector.error;\n\n  var myState = useSelector(function (state) {\n    return state;\n  });\n\n  var getItems = function getItems(count) {\n    return Array.from({\n      length: count\n    }, function (v, k) {\n      return k;\n    }).map(function (k) {\n      return {\n        id: \"item-\".concat(k),\n        content: \"item \".concat(k)\n      };\n    });\n  };\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(getItems(6)),\n      items = _useState[0],\n      setItems = _useState[1];\n\n  var reload = function reload() {\n    return dispatch(thingsLoad());\n  };\n\n  var seed = function seed() {\n    var firstListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: firstListId,\n        listTitle: \"To Do\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: firstListId,\n        cardId: shortid.generate(),\n        cardText: \"Helpdesk Call AA999\",\n        commentCount: 1,\n        completedTaskCount: 1,\n        taskCount: 3\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: firstListId,\n        cardId: shortid.generate(),\n        cardText: \"Helpdesk Call BB999\"\n      }\n    });\n    console.log(\"Insert second list\");\n    var secondListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: secondListId,\n        listTitle: \"Development\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: secondListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call CC999\",\n        likeCount: 1,\n        status: \"red\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: secondListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call DD999\"\n      }\n    });\n    var thirdListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: thirdListId,\n        listTitle: \"Testing\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: thirdListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call EE999\",\n        status: \"red\"\n      }\n    });\n    var fourthListId = shortid.generate();\n    dispatch({\n      type: actions.addList,\n      payload: {\n        listId: fourthListId,\n        listTitle: \"Done\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: fourthListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call FF999\",\n        status: \"blue\"\n      }\n    });\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        listId: fourthListId,\n        cardId: shortid.generate(),\n        cardText: \"Help Desk Call GG999\",\n        status: \"red\"\n      }\n    });\n  };\n\n  useEffect(function () {\n    var _myState$board, _myState$board$lists;\n\n    if (!loaded) reload();\n    if ((myState === null || myState === void 0 ? void 0 : (_myState$board = myState.board) === null || _myState$board === void 0 ? void 0 : (_myState$board$lists = _myState$board.lists) === null || _myState$board$lists === void 0 ? void 0 : _myState$board$lists.length) > 0) return;\n    seed();\n  }, []);\n  /* useEffect(() => {\n  \tconsole.log(\"myState\", myState);\n  }, [myState]); */\n\n  return __jsx(React.Fragment, null, __jsx(NavBar, null), __jsx(SignUpForFree, null), __jsx(Container, {\n    fluid: true\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: 12\n  }, __jsx(KanBanMenu, null)), __jsx(Col, {\n    xs: 12\n  }, __jsx(Board, null)))));\n}\n\nvar Button = function Button(_ref) {\n  var onClick = _ref.onClick,\n      children = _ref.children,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"blue\" : _ref$color,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? null : _ref$className;\n  var button_class = clsx(\"flex flex-row items-center font-bold px-2 py-1 rounded gap-2 cursor-pointer\", \"bg-\".concat(color, \"-600 hover:bg-\").concat(color, \"-700 text-\").concat(color, \"-100\"), className);\n  return __jsx(\"a\", {\n    className: button_class,\n    onClick: onClick\n  }, children);\n};\n\nvar Loading = function Loading() {\n  return __jsx(\"div\", {\n    className: \"p-8 bg-blue-100\"\n  }, __jsx(Loader, {\n    color: \"bg-blue-200\"\n  }));\n};\n\nvar Error = function Error(_ref2) {\n  var error = _ref2.error;\n  return __jsx(\"div\", null, __jsx(\"p\", {\n    className: \"p-8 bg-red-100 text-red-800 font-bold\"\n  }, __jsx(Icons.Exclamation, {\n    size: 16,\n    className: \"inline-block mr-2\"\n  }), error.message), DEBUG && error.stack && __jsx(\"pre\", {\n    className: \"w-full overflow-x-scroll text-xs bg-red-200 text-red-800 p-8\"\n  }, error.stack));\n};\n\nvar ThingsList = function ThingsList(_ref3) {\n  var things = _ref3.things;\n  return __jsx(\"div\", {\n    className: \"divide-y\"\n  }, things.map(function (thing) {\n    return __jsx(ThingItem, {\n      thing: thing,\n      key: thing.word\n    });\n  }));\n};\n\nvar ThingItem = function ThingItem(_ref4) {\n  var thing = _ref4.thing;\n  return __jsx(\"div\", {\n    className: \"p-6\"\n  }, __jsx(\"div\", {\n    className: \"flex flex-row gap-2 items-center\"\n  }, __jsx(\"h2\", {\n    className: \"text-xl font-bold\"\n  }, thing.word), __jsx(\"p\", {\n    className: \"italic text-gray-400\"\n  }, thing.pronounciation)), __jsx(\"p\", {\n    className: \"mt-2\"\n  }, thing.definition));\n};","map":null,"metadata":{},"sourceType":"module"}