{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport * as actions from \"../store/actions\";\nimport Card from \"./Card\";\nimport CardEditor from \"./CardEditor\";\nimport ListEditor from \"./ListEditor\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\nexport default function List(props) {\n  const dispatch = useDispatch();\n  const {\n    board,\n    cardsById,\n    listsById\n  } = useSelector(state => state);\n  const {\n    listId,\n    index\n  } = props;\n  const list = listsById[listId];\n  const {\n    0: editingTitle,\n    1: setEditingTitle\n  } = useState(false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(list.title);\n  const {\n    0: addingCard,\n    1: setAddingCard\n  } = useState(false);\n\n  const toggleAddingCard = () => {\n    setAddingCard(!addingCard);\n  };\n\n  const toggleEditingTitle = () => {\n    setEditingTitle(!editingTitle);\n  };\n\n  const handleChangeTitle = e => setTitle(e.target.value);\n\n  const editListTitle = async () => {\n    toggleEditingTitle();\n    dispatch({\n      type: actions.changeListTitle,\n      payload: {\n        listId,\n        listTitle: title\n      }\n    });\n  };\n\n  const deleteList = async () => {\n    if (window.confirm(\"Are you sure to delete this list?\")) {\n      dispatch({\n        type: actions.deleteList,\n        payload: {\n          listId,\n          cards: list.cards\n        }\n      });\n    }\n  };\n\n  const addCard = async cardText => {\n    toggleAddingCard();\n    const cardId = shortid.generate();\n    dispatch({\n      type: actions.addCard,\n      payload: {\n        cardText,\n        cardId,\n        listId\n      }\n    });\n  };\n\n  return __jsx(Draggable, {\n    draggableId: list._id,\n    index: index\n  }, (provided, snapshot) => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    className: \"List\"\n  }), editingTitle ? __jsx(ListEditor, {\n    list: list,\n    title: title,\n    handleChangeTitle: handleChangeTitle,\n    saveList: editListTitle,\n    onClickOutside: editListTitle,\n    deleteList: deleteList\n  }) : __jsx(\"div\", {\n    className: \"List-Title\",\n    onClick: toggleEditingTitle\n  }, list.title), __jsx(Droppable, {\n    droppableId: list._id\n  }, (provided, _snapshot) => __jsx(\"div\", {\n    ref: provided.innerRef,\n    className: \"Lists-Cards\"\n  }, list.cards && list.cards.map((cardId, index) => __jsx(Card, {\n    key: cardId,\n    cardId: cardId,\n    index: index,\n    listId: list._id\n  })), provided.placeholder, addingCard ? __jsx(CardEditor, {\n    onSave: addCard,\n    onCancel: toggleAddingCard,\n    adding: true\n  }) : __jsx(\"div\", {\n    className: \"Toggle-Add-Card\",\n    onClick: toggleAddingCard\n  }, \"+ Add a card\")))));\n}","map":null,"metadata":{},"sourceType":"module"}