{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from \"react\";\nimport * as actions from \"../store/actions\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CardEditor from \"./CardEditor\";\nimport { TiEdit } from \"react-icons/ti\";\nimport { FaRegComment } from \"react-icons/fa\";\nimport { IoMdCheckboxOutline } from \"react-icons/io\";\nimport { BiLike } from \"react-icons/bi\";\nimport styles from \"./styles/Card.module.scss\";\n\nfunction Card(props) {\n  const dispatch = useDispatch();\n  const {\n    cardsById\n  } = useSelector(state => state);\n  const {\n    cardId,\n    index,\n    listId\n  } = props;\n  const card = cardsById[props.cardId];\n  const {\n    0: hover,\n    1: setHover\n  } = useState(false);\n  const {\n    0: editing,\n    1: setEditing\n  } = useState(false);\n  const {\n    0: text,\n    1: setText\n  } = useState(\"\");\n\n  const startEditing = () => {\n    setEditing(true);\n    setText(props.text);\n    setHover(false);\n  };\n\n  const endEditing = () => {\n    setEditing(false);\n    setHover(false);\n  };\n\n  const startHover = () => setHover(true);\n\n  const endHover = () => setHover(false);\n\n  const editCard = async text => {\n    endEditing();\n    dispatch({\n      type: actions.changeCardText,\n      payload: {\n        cardId: card._id,\n        cardText: text\n      }\n    });\n  };\n\n  const deleteCard = async () => {\n    if (window.confirm(\"Are you sure to delete this card?\")) {\n      dispatch({\n        type: actions.deleteCard,\n        payload: {\n          cardId: card._id,\n          listId\n        }\n      });\n    }\n  };\n\n  if (!editing) {\n    return __jsx(Draggable, {\n      draggableId: card._id,\n      index: index\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      className: \"Card\",\n      onMouseEnter: startHover,\n      onMouseLeave: endHover\n    }), hover && __jsx(\"div\", {\n      className: \"Card-Icons\"\n    }, __jsx(\"div\", {\n      className: \"Card-Icon\",\n      onClick: startEditing\n    }, __jsx(TiEdit, null))), __jsx(\"div\", {\n      className: `Card-Status ${card.status && card.status == \"red\" ? \"red\" : \"\"}`\n    }), card.text, __jsx(\"div\", {\n      className: styles[\"card-activities\"]\n    }, card.commentCount && __jsx(\"div\", {\n      className: styles[\"activity\"]\n    }, __jsx(\"div\", {\n      className: styles[\"activity-icon\"]\n    }, __jsx(FaRegComment, null)), __jsx(\"div\", {\n      className: styles[\"activity-content\"]\n    }, card.commentCount)), card.taskCount && __jsx(\"div\", {\n      className: styles[\"activity\"]\n    }, __jsx(\"div\", {\n      className: styles[\"activity-icon\"]\n    }, __jsx(IoMdCheckboxOutline, null)), __jsx(\"div\", {\n      className: styles[\"activity-content\"]\n    }, `${card.completedTaskCount}/${card.taskCount}`)), card.likeCount && __jsx(\"div\", {\n      className: styles[\"activity\"]\n    }, __jsx(\"div\", {\n      className: styles[\"activity-icon\"]\n    }, __jsx(BiLike, null)), __jsx(\"div\", {\n      className: styles[\"activity-content\"]\n    }, card.likeCount)))));\n  } else {\n    return __jsx(React.Fragment, null, __jsx(CardEditor, {\n      text: card.text,\n      onSave: editCard,\n      onDelete: deleteCard,\n      onCancel: endEditing\n    }));\n  }\n}\n\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}