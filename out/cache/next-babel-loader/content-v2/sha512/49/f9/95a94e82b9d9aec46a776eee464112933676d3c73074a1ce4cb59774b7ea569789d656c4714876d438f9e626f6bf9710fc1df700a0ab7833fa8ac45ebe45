{"ast":null,"code":"var __jsx = React.createElement;\n//import styles from \"./Board.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\nimport * as actions from \"../store/actions\";\nimport List from \"./List\";\nimport AddList from \"./AddList\";\nimport BoardStyled from \"../styled-components/BoardStyled\";\n\nfunction Board(props) {\n  const styles = {\n    board: {\n      height: \"92%\",\n      display: \"flex\",\n      overflowX: \"auto\"\n    }\n  };\n  const dispatch = useDispatch();\n  const firstListId = shortid.generate();\n  const {\n    board,\n    cardsById,\n    listsById\n  } = useSelector(state => state); // const { board } = store;\n\n  const {\n    0: addingList,\n    1: setAddingList\n  } = useState(false);\n\n  const toggleAddingList = () => {\n    setAddingList(!addingList);\n  };\n\n  const handleDragEnd = ({\n    source,\n    destination,\n    type\n  }) => {\n    if (!destination) {\n      return;\n    } // Move list\n\n\n    if (type === \"COLUMN\") {\n      // Prevent update if nothing has changed\n      if (source.index !== destination.index) {\n        dispatch({\n          type: actions.moveList,\n          payload: {\n            oldListIndex: source.index,\n            newListIndex: destination.index\n          }\n        });\n      }\n\n      return;\n    } // Move card\n\n\n    if (source.index !== destination.index || source.droppableId !== destination.droppableId) {\n      dispatch({\n        type: actions.moveCard,\n        payload: {\n          sourceListId: source.droppableId,\n          destListId: destination.droppableId,\n          oldCardIndex: source.index,\n          newCardIndex: destination.index\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"board\", board, cardsById, listsById);\n  }, [board]);\n  return __jsx(BoardStyled, null, __jsx(DragDropContext, {\n    onDragEnd: handleDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"board\",\n    direction: \"horizontal\",\n    type: \"COLUMN\"\n  }, (provided, _snapshot) => __jsx(\"div\", {\n    className: \"Board\",\n    ref: provided.innerRef\n  }, board === null || board === void 0 ? void 0 : board.lists.map((listId, index) => {\n    return __jsx(React.Fragment, null, __jsx(List, {\n      listId: listId,\n      key: listId,\n      index: index\n    }));\n  }), provided.placeholder, __jsx(\"div\", {\n    className: \"Add-List\"\n  }, addingList ? __jsx(AddList, {\n    toggleAddingList: toggleAddingList\n  }) : __jsx(\"div\", {\n    onClick: toggleAddingList,\n    className: \"Add-List-Button\"\n  }, \"+ Add a list\"))))));\n}\n\nexport default Board;","map":null,"metadata":{},"sourceType":"module"}